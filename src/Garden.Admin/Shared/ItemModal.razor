@using Garden.Shared.Models
@using System.Net.Http.Headers
@using System.Security.Authentication
@using System.Text
@using System.Text.Json

@inject IHttpClientFactory HttpClientFactory
@inject TokenService TokenService

<EditForm Model="@Item">
    @* <DataAnnotationsValidator /> *@
    <div class="grid grid-rows-5 h-full">
        <InputText class="form-input row-start-1" type="text" placeholder="Name" @bind-Value="Item.Name"/>
        <h3 class="font-bold row-start-2">Node</h3>
        <TableTemplate Css="row-start-3" Items="@Item!.Nodes" Context="node" ShowLastRow="@_editMode">
            <TableHeader>
                <th>Name</th>
                <th>Type</th>
                <th>Options</th>
            </TableHeader>
            <RowTemplate>
                <td>@node.Name</td>
                <td>@node.Type</td>
                <td>
                    @* <button>Delete</button> *@
                </td>
            </RowTemplate>
            <LastRow>
                <td><InputText text="text" @bind-Value="_newNode.Name"/></td>
                <td>
                    <InputSelect @bind-Value="_newNode.Type">
                        @foreach (var i in Enum.GetNames(typeof(NodeType)))
                        {
                            <option value="@i">@i</option>
                        }
                    </InputSelect>
                </td>
                <td>
                    <button class="@_hiddenCss" @onclick="SaveNode">Save</button>
                    <button class="@_hiddenCss" @onclick="CancelNode">Cancel</button>
                </td>
            </LastRow>
        </TableTemplate>
        <button class="nav-btn-primary row-start-4" @onclick="() => EditNode(true)">Add Node</button>
        <div class="row-start-5">
            <button class="nav-btn-primary" @onclick="() => SaveItem(_updating)">Save</button>
            <button class="nav-btn-primary" @onclick="CancelItem">Cancel</button>
        </div>
        @* <ValidationSummary class="w-11/12 text-red-500 row-start-5 px-5 mx-auto text-base h-1"></ValidationSummary> *@
    </div>
</EditForm>

@code {
    [Parameter]
    public Item? Item { get; set; }
    
    [CascadingParameter] 
    BlazoredModalInstance BlazoredModal { get; set; } = default!;

    private string _hiddenCss = "hidden";
    private bool _editMode;
    private Node _newNode = new();

    private bool _updating;

    protected override void OnInitialized()
    {
        if (Item is not null) _updating = true;
        
        Item ??= new Item();
        Item.Nodes ??= new List<Node>();

        base.OnInitialized();
    }


    private void EditNode(bool edit)
    {
        _hiddenCss = edit ? string.Empty : "hidden";
        _editMode = edit;
    }

    private void SaveNode()
    {
        Item!.Nodes!.Add(_newNode);
        _newNode = new Node();
        EditNode(false);
    }

    private void CancelNode()
    {
        _newNode = new Node();
        EditNode(false);
    }

    private async Task SaveItem(bool EditingItem)
    {
        try
        {
            HttpRequestMessage request;
            request = EditingItem ? new HttpRequestMessage(HttpMethod.Put, $"https://localhost:7161/garden/item/{Item?.Id}")
                : new HttpRequestMessage(HttpMethod.Post, "https://localhost:7161/garden/item");
            
            request.Headers.Authorization = new AuthenticationHeaderValue("Bearer", await TokenService.GetToken());
            
            request.Content = new StringContent(JsonSerializer.Serialize(Item), Encoding.UTF8, "application/json");

            var client = HttpClientFactory.CreateClient();
            var response = await client.SendAsync(request);

            await using var responseStream = await response.Content.ReadAsStreamAsync();

            if (!response.IsSuccessStatusCode)
                throw new HttpRequestException();
            
            await BlazoredModal.CloseAsync(ModalResult.Ok());
            
        }
        catch (HttpRequestException e)
        {
    // TODO: handle other errors.
        }
    }

    private async Task CancelItem()
    {
        Item = new Item();

        await BlazoredModal.CancelAsync();
    }
}