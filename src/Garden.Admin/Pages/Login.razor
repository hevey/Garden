@page "/login"
@using Garden.Shared.Models
@using System.Security.Authentication

@inject TokenService TokenService
@inject NavigationManager NavigationManager

<div class="h-screen w-screen">
    <div class="h-full w-full flex items-center justify-between bg-teal-500">
        <EditForm Model="@_user" OnValidSubmit="@SubmitLogin" class="bg-white w-2/5 mx-auto h-96 flex flex-col pt-5">
            <DataAnnotationsValidator />
            <div class="grid grid-rows-5 h-full">
                <h1 class="w-11/12 text-4xl py-3 px-5 mx-auto row-start-1 h-12">Garden</h1>
                <InputText class="w-11/12 row-start-2 h-12 rounded-md border border-[#E9EDF4] px-5 mx-auto text-base placeholder-[#ACB6BE] outline-none focus-visible:shadow-none focus:border-blue-500" type="email" Value="@_user.Email" placeholder="email" ValueChanged="EmailChanged" ValueExpression="() => _user.Email"/>
                <InputText class="w-11/12 row-start-3 h-12 rounded-md border border-[#E9EDF4] px-5 mx-auto text-base placeholder-[#ACB6BE] outline-none focus-visible:shadow-none focus:border-blue-500" type="password" Value="@_user.Password" placeholder="password" ValueChanged="PasswordChanged" ValueExpression="() => _user.Password"/>

                <button class="w-11/12 row-start-4 h-12 rounded-md border border-primary px-5 mx-auto bg-blue-500 text-base text-white cursor-pointer hover:bg-opacity-90 transition" type="submit">Login</button>
                
                <ValidationSummary class="w-11/12 text-red-500 row-start-5 px-5 mx-auto text-base h-1"></ValidationSummary>
                <span class="w-11/12 text-red-500 row-start-5 px-5 mx-auto text-base h-1 @_hiddenCss">@_errorMessage</span>
            </div>
        </EditForm>
    </div>    
</div>

@code {
    private readonly User _user = new();

    private string _errorMessage = string.Empty;
    private string _hiddenCss = "hidden";

    protected override async Task<Task> OnInitializedAsync()
    {
        try
        {
            var loggedIn = await TokenService.CheckTokenAsync();
            if(loggedIn) NavigationManager.NavigateTo("/");
        }
        catch (AuthenticationException e) {}

        return base.OnInitializedAsync();
    }

    private async Task SubmitLogin()
    {
        _errorMessage = "";
        _hiddenCss = "hidden";
        try
        {
            var loggedIn = await TokenService.Login(_user);
            if(loggedIn) NavigationManager.NavigateTo("/");
        }
        catch (HttpRequestException e)
        {
            _errorMessage = e.Message;
            _hiddenCss = "";
        }
    }

    private void PasswordChanged(string value)
    {
        _errorMessage = "";
        _hiddenCss = "hidden";

        _user.Password = value;
    }

    private void EmailChanged(string value)
    {
        _errorMessage = "";
        _hiddenCss = "hidden";

        _user.Email = value;
    }

}