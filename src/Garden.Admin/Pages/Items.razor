@page "/Items"
@using Garden.Shared.Models
@using System.Net.Http.Headers
@using System.Security.Authentication
@using System.Text.Json

@inject IHttpClientFactory HttpClientFactory
@inject TokenService TokenService

<NavMenu />

<div class="max-w-5xl mx-auto">
  <h3 class="text-4xl">Items</h3>
  
  <button class="nav-btn-primary" @onclick="NewItemModal">Add Item Type</button>
  
  <TableTemplate Items="_items" Context="item">
    <TableHeader>
      <th>Name</th>
      <th>Version</th>
      <th>Edit</th>
      <th>Delete</th>
    </TableHeader>
    <RowTemplate>
      <td>@item.Name</td>
      <td>@item.Version</td>
      <td><button @onclick="() => EditModal(item)">edit</button></td>
      <td><button @onclick="() => DeleteItem(item.Id!)">Delete</button></td>
    </RowTemplate>
  </TableTemplate>
</div>

@code {
  private List<Item> _items = new();

  [CascadingParameter]
  public IModalService Modal { get; set; } = default!;

  protected override async Task<Task> OnInitializedAsync()
  {
    await TokenService.CheckAuthentication();
    
    await GetItemsAsync();

    return base.OnInitializedAsync();
  }

  private async Task GetItemsAsync()
  {
    try
    {
      var request = new HttpRequestMessage(HttpMethod.Get, "https://localhost:7161/garden/items/latest");
      request.Headers.Authorization = new AuthenticationHeaderValue("Bearer", await TokenService.GetToken());

      var client = HttpClientFactory.CreateClient();
      var response = await client.SendAsync(request);

      await using var responseStream = await response.Content.ReadAsStreamAsync();

      var content = await JsonSerializer.DeserializeAsync<List<Item>>(responseStream);

      if (!response.IsSuccessStatusCode)
        throw new HttpRequestException();

      if (content != null)
      {
        var orderedEnumerable = content.OrderBy(i => i.Name);
        _items = orderedEnumerable.ToList();  
      }
      
    }
    catch (AuthenticationException e)
    {
  // TODO: handle authentication exception
    }
    catch (HttpRequestException e)
    {
  // TODO: handle other errors.
    }
  }

  private async Task NewItemModal()
  {
    var itemModal = Modal.Show<ItemModal>("Item Type");
    var result = await itemModal.Result;

    if (result.Confirmed)
    {
      await GetItemsAsync();
    }
    
  }

  private async Task EditModal(Item item)
  {
    var parameters = new ModalParameters()
      .Add(nameof(ItemModal.Item), item);

    var itemModal = Modal.Show<ItemModal>("Item Type", parameters);
    var result = await itemModal.Result;

    if (result.Confirmed)
    {
      await GetItemsAsync();
    }
  }

  private async Task DeleteItem(string id)
  {
    var request = new HttpRequestMessage(HttpMethod.Delete, $"https://localhost:7161/garden/item/{id}");
    request.Headers.Authorization = new AuthenticationHeaderValue("Bearer", await TokenService.GetToken());

    var client = HttpClientFactory.CreateClient();
    var response = await client.SendAsync(request);

    if (response.IsSuccessStatusCode)
      await GetItemsAsync();
    
  // if (!response.IsSuccessStatusCode)
  //TODO: Show Error when delete fails

  }
}